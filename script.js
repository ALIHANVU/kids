// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
async function loadData() {
    try {
        const response = await fetch('data.json');
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        return null;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    const data = await loadData();
    if (!data) return;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.getElementById('lessonsBtn').addEventListener('click', () => showSection('lessonsSection'));
    document.getElementById('gamesBtn').addEventListener('click', () => showSection('gamesSection'));
    document.getElementById('achievementsBtn').addEventListener('click', () => showSection('achievementsSection'));

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π –¥–∞–Ω–Ω—ã–º–∏
    populateLessons(data.lessons);
    populateGames(data.games);
    populateAchievements(data.achievements);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
function showSection(sectionId) {
    document.querySelectorAll('section').forEach(section => {
        section.classList.add('hidden');
        section.classList.remove('active-section');
    });
    document.getElementById(sectionId).classList.remove('hidden');
    document.getElementById(sectionId).classList.add('active-section');
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤
function populateLessons(lessons) {
    const lessonsContainer = document.getElementById('lessonsList');
    lessons.forEach(lesson => {
        const lessonCard = document.createElement('div');
        lessonCard.className = 'lesson-card';
        lessonCard.innerHTML = `
            <h3>${lesson.title}</h3>
            <p>${lesson.description}</p>
            <div>–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${lesson.difficulty}</div>
            <button onclick="startLesson(${lesson.id})" class="start-btn">–ù–∞—á–∞—Ç—å —É—Ä–æ–∫</button>
        `;
        lessonsContainer.appendChild(lessonCard);
    });
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä
function populateGames(games) {
    const gamesContainer = document.getElementById('gamesList');
    games.forEach(game => {
        const gameCard = document.createElement('div');
        gameCard.className = 'game-card';
        gameCard.innerHTML = `
            <h3>${game.title}</h3>
            <p>${game.description}</p>
            <div>–û—á–∫–∏: ${game.points}</div>
            <button onclick="startGame(${game.id})" class="start-btn">–ò–≥—Ä–∞—Ç—å</button>
        `;
        gamesContainer.appendChild(gameCard);
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á
function checkTask(taskId, userAnswer) {
    const tasks = JSON.parse(localStorage.getItem('currentTasks') || '[]');
    const task = tasks.find(t => t.id === taskId);
    
    if (!task) return false;

    let isCorrect = false;
    switch (task.type) {
        case 'sequence':
            isCorrect = userAnswer.join(',') === task.correctAnswer.join(',');
            break;
        case 'quiz':
            isCorrect = userAnswer === task.correctAnswer;
            break;
        case 'code':
            isCorrect = evaluateCode(userAnswer, task.tests);
            break;
    }

    if (isCorrect) {
        updateAchievements(task.points);
        showSuccess('–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü! üéâ');
    } else {
        showError('–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! üí™');
    }

    return isCorrect;
}

// –ó–∞–ø—É—Å–∫ —É—Ä–æ–∫–∞
async function startLesson(lessonId) {
    const data = await loadData();
    const lesson = data.lessons.find(l => l.id === lessonId);
    
    if (!lesson) return;

    const lessonContainer = document.createElement('div');
    lessonContainer.className = 'lesson-content';
    lessonContainer.innerHTML = `
        <h2>${lesson.title}</h2>
        <div class="lesson-explanation">${lesson.explanation}</div>
        <div class="task-container"></div>
    `;

    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
    const taskContainer = lessonContainer.querySelector('.task-container');
    
    switch (lesson.taskType) {
        case 'sequence':
            createSequenceTask(taskContainer, lesson.task);
            break;
        case 'quiz':
            createQuizTask(taskContainer, lesson.task);
            break;
        case 'code':
            createCodeTask(taskContainer, lesson.task);
            break;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–∫
    const mainSection = document.querySelector('main');
    mainSection.innerHTML = '';
    mainSection.appendChild(lessonContainer);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
function createSequenceTask(container, task) {
    const blocks = task.blocks.sort(() => Math.random() - 0.5);
    
    container.innerHTML = `
        <div class="task-description">${task.description}</div>
        <div class="blocks-container">
            ${blocks.map(block => `
                <div class="code-block" draggable="true" data-block="${block}">
                    ${block}
                </div>
            `).join('')}
        </div>
        <div class="solution-container"></div>
        <button onclick="checkSequenceTask()" class="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª drag and drop
    setupDragAndDrop(container);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏-–≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
function createQuizTask(container, task) {
    container.innerHTML = `
        <div class="task-description">${task.question}</div>
        <div class="options-container">
            ${task.options.map((option, index) => `
                <label class="quiz-option">
                    <input type="radio" name="quiz" value="${index}">
                    ${option}
                </label>
            `).join('')}
        </div>
        <button onclick="checkQuizTask()" class="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    `;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
function createCodeTask(container, task) {
    container.innerHTML = `
        <div class="task-description">${task.description}</div>
        <div class="code-editor">
            <textarea class="code-input" placeholder="–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∫–æ–¥ –∑–¥–µ—Å—å...">${task.template || ''}</textarea>
        </div>
        <div class="test-cases">
            <h4>–ü—Ä–∏–º–µ—Ä—ã:</h4>
            ${task.examples.map(example => `
                <div class="example">
                    <div>–í–≤–æ–¥: ${example.input}</div>
                    <div>–í—ã–≤–æ–¥: ${example.output}</div>
                </div>
            `).join('')}
        </div>
        <button onclick="checkCodeTask()" class="check-btn">–ó–∞–ø—É—Å—Ç–∏—Ç—å</button>
    `;
}

// –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á
function checkSequenceTask() {
    const blocks = Array.from(document.querySelectorAll('.solution-container .code-block'))
        .map(block => block.dataset.block);
    return checkTask(getCurrentTaskId(), blocks);
}

function checkQuizTask() {
    const selected = document.querySelector('input[name="quiz"]:checked');
    if (!selected) {
        showError('–í—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç!');
        return;
    }
    return checkTask(getCurrentTaskId(), parseInt(selected.value));
}

function checkCodeTask() {
    const code = document.querySelector('.code-input').value;
    return checkTask(getCurrentTaskId(), code);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showSuccess(message) {
    const notification = document.createElement('div');
    notification.className = 'notification success';
    notification.textContent = message;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
}

function showError(message) {
    const notification = document.createElement('div');
    notification.className = 'notification error';
    notification.textContent = message;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
}

function updateAchievements(points) {
    let achievements = JSON.parse(localStorage.getItem('achievements') || '[]');
    achievements.push({
        points: points,
        timestamp: Date.now()
    });
    localStorage.setItem('achievements', JSON.stringify(achievements));
    updateAchievementsDisplay();
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initApp);
